
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Generates a custom meal plan based on user dietary needs, restrictions,
 * preferred ingredients, health goals, cooking preferences, cuisine choices, lifestyle, family considerations,
 * and feedback on previous plans.
 *
 * - generateCustomMealPlan - A function that generates a custom meal plan.
 * - GenerateCustomMealPlanInput - The input type for the generateCustomMealPlan function.
 * - GenerateCustomMealPlanOutput - The return type for the generateCustomMealPlan function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateCustomMealPlanInputSchema = z.object({
  dietaryRestrictions: z
    .string()
    .describe('Any dietary restrictions the user has (e.g., gluten-free, vegetarian, vegan, allergies).'),
  preferredIngredients: z
    .string()
    .describe('Ingredients the user prefers to include or has readily available.'),
  calorieIntake: z
    .number()
    .describe('The desired daily calorie intake for the meal plan.'),
  numberOfMeals: z.number().describe('The number of meals to include in the meal plan (e.g., 3 for breakfast, lunch, and dinner, plus optional snacks).'),
  healthGoals: z.string().optional().describe('User health goals, e.g., weight loss, muscle gain, general wellness.'),
  cookingTimePreference: z.string().optional().describe('Preferred cooking time per meal, e.g., quick (under 30 mins), moderate (30-60 mins), no preference.'),
  cuisinePreferences: z.string().optional().describe('Favorite cuisines or types of food, e.g., Italian, Mexican, Asian, None.'),
  lifestyle: z.string().optional().describe('User lifestyle, e.g., busy parent, athlete, student, sedentary office worker.'),
  familyMembersDescription: z.string().optional().describe('Briefly describe the number of people and any key dietary considerations for the family, e.g., "Family of 4, 2 adults, 2 kids (ages 6, 10), one child is vegetarian."'),
  previousPlanFeedback: z.string().optional().describe('Feedback on previous meal plans, e.g., "Loved the chicken recipes, but found breakfast too repetitive." This helps in refining future plans.'),
  apiKey: z.string().optional().describe('Optional user-provided Google AI API key.'),
});

export type GenerateCustomMealPlanInput = z.infer<
  typeof GenerateCustomMealPlanInputSchema
>;

const MealSchema = z.object({
  name: z.string().describe("Name of the meal (e.g., Breakfast, Lunch, Dinner, Snack)."),
  dish: z.string().describe("Name of the dish for this meal."),
  recipe: z.string().describe("Brief recipe or preparation instructions. Include measurements where appropriate. If known, add simple batch cooking tips like 'Can be made ahead and stored for X days' or 'Double the recipe and freeze half' where applicable."),
  servings: z.number().optional().describe("Number of servings this recipe makes. Default to 1 if not specified for family."),
  prepTime: z.string().optional().describe("Estimated preparation time for the meal, e.g., '10 mins'."),
  cookTime: z.string().optional().describe("Estimated cooking time for the meal, e.g., '20 mins'."),
  substitutions: z.array(z.string()).optional().describe("Suggest 1-2 common, simple ingredient substitutions for key ingredients if applicable (e.g., 'For gluten-free: use gluten-free pasta')."),
  notes: z.string().optional().describe("Any additional notes, like cooking tips, specific brand recommendations if crucial, or alternatives."),
});

const DailyPlanSchema = z.object({
  day: z.string().describe("Day of the week or day number (e.g., Monday, Day 1)."),
  meals: z.array(MealSchema).describe("List of meals for the day."),
  estimatedCalories: z.number().optional().describe("Estimated total calories for the day."),
  estimatedProtein: z.string().optional().describe("Estimated total protein for the day (e.g., '80g')."),
  estimatedCarbs: z.string().optional().describe("Estimated total carbohydrates for the day (e.g., '150g')."),
  estimatedFats: z.string().optional().describe("Estimated total fats for the day (e.g., '60g')."),
});


const GenerateCustomMealPlanOutputSchema = z.object({
  mealPlanTitle: z.string().describe("A catchy title for the generated meal plan."),
  dailyPlans: z.array(DailyPlanSchema).describe("A list of daily meal plans, typically for 3-7 days."),
  shoppingList: z.array(z.string()).describe('A consolidated list of grocery items needed for the entire meal plan. Categorize if possible (e.g., Produce, Proteins, Pantry).'),
  preparationTips: z.array(z.string()).optional().describe("General tips for meal prepping or preparing the meals in this plan."),
});

export type GenerateCustomMealPlanOutput = z.infer<
  typeof GenerateCustomMealPlanOutputSchema
>;

export async function generateCustomMealPlan(
  input: GenerateCustomMealPlanInput
): Promise<GenerateCustomMealPlanOutput> {
  return generateCustomMealPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateCustomMealPlanPrompt',
  input: {schema: GenerateCustomMealPlanInputSchema.omit({ apiKey: true })},
  output: {schema: GenerateCustomMealPlanOutputSchema},
  prompt: `You are an expert AI Nutrition Coach and Meal Planner. Your task is to create a highly personalized, engaging, and practical meal plan for a user based on their comprehensive profile. The meal plan should ideally cover 3-7 days.

User Profile & Preferences:
*   Dietary Restrictions: {{{dietaryRestrictions}}}
*   Preferred Ingredients/Available Food: {{{preferredIngredients}}}
*   Desired Daily Calorie Intake: {{{calorieIntake}}} calories
*   Number of Meals Per Day: {{{numberOfMeals}}}
*   Health Goals: {{{healthGoals}}}
*   Cooking Time Preference: {{{cookingTimePreference}}}
*   Cuisine Preferences: {{{cuisinePreferences}}}
*   Lifestyle: {{{lifestyle}}}
*   Family Considerations: {{{familyMembersDescription}}} (If provided, ensure recipes are family-friendly and portioning advice considers this. Default to 1 serving per recipe if not specified.)
*   Feedback on Previous Plan (if any): {{{previousPlanFeedback}}} (Use this to improve the current plan)

Meal Plan Requirements:
1.  **Title**: Create a catchy and relevant title for the meal plan.
2.  **Daily Plans**: For each day (aim for 3-7 days):
    *   Specify the day (e.g., Monday, Day 1).
    *   List each meal (e.g., Breakfast, Lunch, Dinner, Snack if appropriate based on numberOfMeals).
    *   For each meal:
        *   Provide the dish name.
        *   Include a brief, easy-to-follow recipe or preparation instructions with measurements.
        *   Specify the number of servings the recipe makes (default to 1 if not a family plan, or adjust based on familyMembersDescription).
        *   Specify estimated prep time (e.g., '10 mins') and cook time (e.g., '20 mins').
        *   Include 1-2 simple, common ingredient substitutions if applicable (e.g., "For gluten-free: use GF oats").
        *   Add any relevant notes (e.g., quick tips, make-ahead suggestions).
        *   If practical, include a batch cooking tip (e.g., "Make a double batch of the quinoa on Day 1 to use throughout the week." or "This soup freezes well for up to 3 months.").
    *   Provide an estimated total for calories, protein, carbs, and fats for the day.
3.  **Shopping List**: Generate a consolidated shopping list for all ingredients needed for the entire meal plan. Group items by category (e.g., Produce, Proteins, Dairy, Pantry Staples) if possible.
4.  **Preparation Tips**: Offer 2-3 general tips for meal prepping or efficiently preparing the meals in this plan.
5.  **Variety and Appeal**: Ensure the meal plan is varied, incorporates culturally diverse options if aligned with preferences, and is exciting. Avoid repetitive meals unless specifically requested or practical.
6.  **Practicality**: Recipes should be realistic for the user's lifestyle and cooking time preference.
7.  **Nutritional Balance**: While adhering to calorie targets, aim for a balanced distribution of macronutrients suitable for their health goals.

Tone: Empathetic, encouraging, and professional. Make the user feel supported and excited to start their plan.

Output Format: Strictly adhere to the defined output schema. Ensure all recipes are detailed enough to be followed by a novice cook and include measurements.
  `,
});

const generateCustomMealPlanFlow = ai.defineFlow(
  {
    name: 'generateCustomMealPlanFlow',
    inputSchema: GenerateCustomMealPlanInputSchema,
    outputSchema: GenerateCustomMealPlanOutputSchema,
  },
  async (input) => {
    const { apiKey, ...promptInput } = input;
    const options = apiKey ? { config: { apiKey } } : undefined;
    const { output } = await prompt(promptInput, options);
    return output!;
  }
);

